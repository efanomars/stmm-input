Installation
============

Each project is separate and has its own description ('README.md'),
license, installing instructions, etc. and can be built in its 
own subfolder. But since the projects partially depend on each other, 
a script is provided to compile and install the binaries in the right order.

  $ ./scripts/install_stmm-input-all.py  --help

for a description of all available options.

Usage examples:

  $ ./scripts/install_stmm-input-all.py  -b Debug  --destdir /usr/local

Compiles (debug mode) and installs all libraries and the executable
to the directory (prefix) '/usr/local'.
The first parameter can also be 'Release', 'MinSizeRel' or 'RelWithDebInfo'
(see cmake documentation).
The second parameter can be omitted ('/usr/local' is the default).

If you want to install to your home folder (~/usr) instead of system wide

  $ ./scripts/install_stmm-input-all.py  --dest-dir /home/myname/usr  --no-sudo

and make sure needed bash environment variables are set before the call

  # for the library loader
  export LD_LIBRARY_PATH=/home/myname/usr/lib
  # for pkg-config
  export PKG_CONFIG_PATH=/home/myname/usr/lib/pkgconfig
  # for g++ linker
  export LIBRARY_PATH=/home/myname/usr/lib
  # to find executable
  export PATH=/home/myname/usr/bin:$PATH

Uninstallation
==============

For all the available options

  $ ./scripts/uninstall_stmm-input-all.py --help

Usage example:

  $ ./scripts/uninstall_stmm-input-all.py  -y  -b

uninstalls from installation dir "/usr/local" without confirmation and
removes the build subfolder of each project.


Dependencies
============

- libstmm-input depends on
    + libstdc++

- libstmm-input-base depends on
    + libstmm-input

- libstmm-input-ev   depends on
    + libstmm-input-base

- libstmm-input-fake  depends on
    + libstmm-input-ev

- libstmm-input-gtk  depends on
    + libstmm-input-ev
    + libxi-dev
    + libx11-dev
    + libgtkmm-3.0-dev

- device-floater     depends on
    + libgtkmm-3.0-dev
    + libxi-dev
    + libx11-dev

Note: in some linux distributions the packages might be named slightly
differently (the trailing '-dev' might not be needed).


Needed packages
===============
To build the source files you need a c++14 compiler and cmake.
To build the documentation you need doxygen and graphviz.
To build the tests you need google test (gtest).
